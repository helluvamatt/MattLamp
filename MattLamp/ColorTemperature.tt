<#@ template hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Drawing" #>
<#@ assembly name="$(SolutionDir)MattLamp.Common\bin\$(Configuration)\MattLamp.Common.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Drawing" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MattLamp.Common" #>
<#@ output extension=".cs" #>
<#
// Compute K -> Color scale
var colorList = new List<Color>();
foreach (float val in Enumerable.Range(15, 86).Select(n => n * 100.0f)) // [15 - 100] -> [1500f - 10000f]
{
    colorList.Add(ColorUtils.FromTemperatureK(val));
}
#>
// This file is generated by a template: ColorTemperature.tt
// Changes should be made to that template, then run the T4 transform to regenerate this file

using System.Drawing;
using System.Drawing.Drawing2D;

namespace MattLamp
{
	internal static class ColorTemperature
	{
		public static readonly ColorBlend TEMP_BLEND = new ColorBlend()
        {
			Colors = new Color[]
			{
<# foreach (var c in colorList) { #>
				Color.FromArgb(<# Write(c.R + ""); #>, <# Write(c.G + ""); #>, <# Write(c.B + ""); #>),
<# } #>
			},
			Positions = new float[]
			{
<# for (int i = 0; i < colorList.Count; i++) { #>
				<# Write(string.Format("{0}f,", (float)i / (colorList.Count - 1))); #>

<# } #>
			}
        };
	}
}
